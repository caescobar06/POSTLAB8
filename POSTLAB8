#pragma config FOSC = INTRC_NOCLKOUT// Oscillator Selection bits (INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)
// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)

#include <xc.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define __XTAL_FREQ 1000000 //FRECUENCIA DE 1 MHZ

uint8_t flag, pot; 
char selection, REC;
char pot_val[]; //vector del potenciometro

void setup(void);
void print(unsigned char *word);
void desplegar(char selection);

//---------INTERRUPCIONES-------------------------
void __interrupt() isr(void) //INTERRUPCIONES 
{
    if (PIR1bits.RCIF) //INTERRUPCIÓN PARA DETECTAR SI HAY ALGÚN DATO RECIBIDO
    {
        REC = RCREG;
    }
    if (PIR1bits.ADIF) //INTERRUPCIÓN DEL ADC
    {
        if (ADCON0bits.CHS = 0b0000)
        {
            pot = ADRESH;
        }
        PIR1bits.ADIF = 0; //LIMPIA LA BANDERA DEL ADC
    }
    
    
}
//---------FIN DE LAS INTERRUPCIONES--------------

void main(void)
{
    setup();
    while (1)
    {
        if (ADCON0bits.GO == 0) //SI NO SE HA HECHO LA CONVERSIÓN DEL ADC
        {
            ADCON0bits.GO = 1; //REALIZAR LA CONVERSIÓN
        }
        
        print("\r Ingrese el numero de la accion que desea  \r");
        print(" 1. Leer el valor del potenciometro          \r");
        print(" 2. Mostrar el valor en el puerto B en ACSSI  \r");
        flag = 1; //COLOCA LA BANDEA EN 1
        
        while (flag){
            while (PIR1bits.RCIF == 0); //MIENTRAS NO TENGA NINGÚN VALOR
            selection = REC; 
            
            switch (selection)
            {
                case ('1'): //DE ELEGIR VER EL VALOR DEL POTENCIÓMETRO
                    print("\r El valor actual del potenciometro es:  \r");
                    itoa(pot_val, pot, 10);
                    desplegar(pot_val);
                    flag = 0; //BAJA LA BANDERA 
                    break;
                case ('2'): //DE ELEGIR MANDAR EL VALOR DEL POTENCIÓMETRO
                    print("\r Ingrese el valor a mostrar en el puerto B:  \r");
                    while(PIR1bits.RCIF == 0); //MIENTRAS NO RECIBA ALGÚN VALOR
                    PORTB = REC; //MOVER EL VALOR INGRESADO AL PUERTO B
                    desplegar(REC); //MUESTRA EL VALOR EN LA TERMINAL
                    flag = 0;
                    break;
                    
                default:
                    print("\r HA OCURRIDO UN ERROR DENTRO DEL PROGRAMA \r");  
                    flag = 0;
                    break;
            }   
        }
    }
    return;
}

void setup(void)
{
    //CONFIGURACIÓN DE PUERTOS
    ANSEL = 0b00000001; //UNA ENTRADA ANALÓGICA
    ANSELH = 0;
    TRISA = 0b00000001;
    PORTA = 0x00;
    
    TRISB = 0x00; //TODAS SALIDAS EN EL PUERTO B
    PORTB = 0x00; //LIMPIA EL PUERTO B
    //FIN DE LA CONFIGURACIÓN DE LOS PUERTOS
    
    //CONFIGURACIÓN DEL RELOJ
    OSCCONbits.IRCF = 0b0100; //RELOJ A 1 MHZ
    OSCCONbits.SCS = 1; //RELOJ INTERNO
    //FIN DE LA CONFIGURACIÓN DEL RELOJ
    
    //CONFIGURACIÓN DE LOS MÓDULOS DE CONFIGURACIÓN
    TXSTAbits.SYNC = 0; //COMUNICACIÓN DE LADO A LADO (ASÍNCRONA)
    TXSTAbits.BRGH = 1;//BAUD RATE A VELOCIDAD ALTA
    BAUDCTLbits.BRG16 = 1; //BAUD RATE DE NECESIDAD DE 16 BITS
    
    SPBRG = 25;
    SPBRGH = 0; //BAUR RATE , % de error de 0.16%
    
        //HABILITACIÓN DE COMUNICADORES
    RCSTAbits.SPEN =1; //COMUNICACIÓN HABILITADA
    TXSTAbits.TX9 = 0; //8 BITS PARA USO
    TXSTAbits.TXEN = 1; //TRANSMISOR HABILITADO
    RCSTAbits.CREN =1 ; //RECEPTOR HABILITADO
        //FIN DE LA CONFIGURACIÓN DE LAS COMUNICACIONES
    
   //CONFIGURACIPON DEL ADC
    ADCON1bits.ADFM = 0;  //JUSTIFICADO A LA IZQUIERDA                  
    ADCON1bits.VCFG0 = 0;                   
    ADCON1bits.VCFG1 = 0; //VOLTAJES DE REFERENCIA
    ADCON0bits.ADCS = 0b01; // FOSC/8
    ADCON0bits.CHS = 0b0000; //CANAL ANALÓGICO AN0
         
    //__delay_us(1);
    
    INTCONbits.GIE = 1;//interrupción global hahbilitada
    INTCONbits.PEIE = 1;
    PIE1bits.ADIE = 1;
    PIE1bits.RCIE = 1;
    PIR1bits.ADIF = 0;
    
    ADCON0bits.ADON = 1; //ENCIENDE EL ADC    
    return;
    //FIN DE LA CONFIGURACIÓN DEL ADC
}

void print(unsigned char *word)
{
    while(*word != '\0')  //MIENTRAS QUE LA PALABRA SEA DISTINTA A NADA
    {
        while (TXIF != 1);
        TXREG = *word;
        *word++; //se incrementa el puntero
    }
    return;
}

void desplegar(char selection)
{
    while(TXSTAbits.TRMT ==0);
    TXREG = selection;
    return;
}
